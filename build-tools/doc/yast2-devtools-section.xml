<?xml version="1.0" encoding="ISO-8859-1" ?>

<section>
    <title>YaST2 Development Tools</title>

<para>
This document is a user's guide to the YaST2 <emphasis>devtools</emphasis> (short for
"development tools"), a utility collection to make developing YaST2 code easier
- C++ as well as YCP.
</para>


<section id="devtools_quick-start">
<title id="devtools_quick-start.title">Quick Start</title>


<itemizedlist>
<listitem>

<para>
Install the <literal remap="tt">yast2-devtools</literal> RPM or check out the <literal remap="tt">devtools</literal> module from
the YaST2 CVS and build and install it:


<programlisting>
cd yast2                  # your YaST2 CVS working directory
cvs co devtools
cd devtools
make -f Makefile.cvs
make
sudo make install
</programlisting>

</para>
</listitem>
<listitem userlevel="suse">

<para>
    See the <link linkend="devtools_migration"
        endterm="devtools_migration.title"/> how to change your C++ or
YCP module.
</para>
</listitem>
<listitem userlevel="suse">

<para>
Build and use your package as before.
</para>
</listitem>
<listitem userlevel="suse">
<para>
If <literal remap="tt">make package</literal> complains, fix the complaints. For a tempoarary package to
check whether or not <literal remap="tt">build</literal> works with your changes, use "<literal remap="tt">make
package-local</literal>" - but <emphasis>never check in a package to <literal remap="tt">/work/src/done</literal>
that you created this way!</emphasis>
</para>
</listitem>
</itemizedlist>


</section>

<section>
<title>What is it?</title>

<para>
The YaST2 devtools are an add-on to the classic automake / autoconf environment
YaST2 used to use.
</para>

<para>
Since the toplevel <filename>Makefile.am</filename> is pretty much the same throughout all
YaST2 C++ or YCP modules yet contains more and more specialized <literal remap="tt">make</literal>
targets, this toplevel <filename>Makefile.am</filename> is now automatically generated.
</para>

<para>
The only thing that is (or, rather, "should be") different in all those
toplevel <filename>Makefile.am</filename> files is the "<literal remap="tt">SUBDIRS =</literal>" line. This line is
moved to a <filename>SUBDIRS</filename>  in the
package's toplevel directory, much like <literal remap="tt">RPMNAME</literal>, <literal remap="tt">VERSION</literal>,
<literal remap="tt">MAINTAINER</literal> etc. - the rest of <filename>Makefile.am</filename> is copied from a common
path <filename>/usr/share/YaST2/data/devtools/admin</filename>. Thus, changes that should affect
all of YaST2's toplevel <filename>Makefile.am</filename> files are much easier to do and all
YaST2 modules can benefit from them without the need to change (i.e. <literal remap="tt">cvs
up</literal>, edit, <literal remap="tt">cvs ci</literal>) all of over 85 individual files.
</para>

<para>
This implies, of course, that the toplevel <filename>Makefile.am</filename> is no longer stored
in the CVS repository since it is now automatically generated.
</para>

<para>
On the downside, this of course implies that the files and scripts required for
this new automagic are available at build time - i.e. on each YaST2 developer's
development machine as well as in the <emphasis>build</emphasis> environment. Thus, you
will need to either install the appropriate RPM or build the devtools manually
- see the <link linkend="devtools_migration" endterm="devtools_quick-start.title"/> section for details.
</para>

</section>

<section id="devtools_migration">
<title id="devtools_migration.title">Migration</title>

<para>
If you haven't done that yet, install the devtools - see the
<link linkend="devtools_migration" endterm="devtools_quick-start.title"/> section for details.
</para>

<para>
If you are not sure, check <literal remap="tt">/usr/share/YaST2/data/devtools</literal> - if you don't
have that directory, the devtools are not installed.
</para>

<para>
You can simply use the <literal remap="tt">devtools-migration</literal> script that comes with the
devtools package:
</para>

<para>

<programlisting>
cd yast2/modules/mypackage
y2tool devtools-migration
cvs ci
</programlisting>

</para>

<para>
This script performs the following steps:
</para>
<itemizedlist>
<listitem>
<para>
Go to your package's toplevel directory:
<programlisting>
cd yast2/modules/mypackage
</programlisting>

</para>
</listitem>
<listitem>
<para>
    Create a <filename>SUBDIRS</filename> file from your existing
    <filename>Makefile.am</filename>.</para>
    <note><para>You can do without that <literal remap="tt">SUBDIRS</literal> file if you want
to include all subdirectories that have a <filename>Makefile.am</filename> in alphabetical
order anyway):

<programlisting>
grep 'SUBDIRS' Makefile.am | sed -e 's/SUBDIRS *= *//' &#62;SUBDIRS
</programlisting>

Getting rid of the "<literal remap="tt">SUBDIRS = </literal>" prefix is not exactly mandatory (the
devtools are forgiving enough to handle that), but recommended.
</para>
</note>
</listitem>

<listitem>
<para>
Add that new <literal remap="tt">SUBDIRS</literal> file to the CVS repository:
<programlisting>
cvs add SUBDIRS
</programlisting>


</para>
</listitem>
<listitem>

<para>
Get rid of the old <filename>Makefile.am</filename> both locally and in the CVS repository -
this file will be automatically generated from now on:

<programlisting>
cvs rm -f Makefile.am
</programlisting>
</para>
</listitem>
<listitem>
<para>
Get rid of the old copyright notices (<literal remap="tt">COPYING</literal>,
<literal remap="tt">COPYRIGHT.{english,german,french}</literal>)  both locally and in the CVS repository:

<programlisting>
cvs rm -f COPYING COPYRIGHT.{english,french,german}
</programlisting>

</para>

<para>
Those files will automatically be added to the tarball upon <literal remap="tt">make package</literal>,
<literal remap="tt">make dist</literal> and related commands.
</para>
</listitem>
<listitem>

<para>
Add <filename>Makefile.am</filename> to the <literal remap="tt">.cvsignore</literal> file since it will be automatically
generated from now on (otherwise "cvs up" will keep complaining about it):

<programlisting>
    echo "Makefile.am" >>.cvsignore
</programlisting>
</para>
</listitem>


<listitem>
<para>
Edit your <literal remap="tt">.spec.in</literal> file. Locate the <literal remap="tt">neededforbuild</literal> line and add
<literal remap="tt">yast2-devtools</literal> to it:
<programlisting>
vi *.spec.in
...
(locate "neededforbuild")
(add "yast2-devtools")
(save + quit)
</programlisting>


OK, that was the wimp version. Here is the freak version:

<programlisting>
perl -p -i -e 's/neededforbuild/neededforbuild yast2-devtools/' *.spec.in
</programlisting>

</para>
</listitem>

<listitem>
<para>
Add the line that creates the toplevel <filename>Makefile.am</filename> to your <literal remap="tt">Makefile.cvs</literal>:
<programlisting>
vi Makefile.cvs
(locate "aclocal")
(add a new line above this:)
[tab]	y2tool y2automake
(save + quit)
</programlisting>
Again, a freak version for this:
<programlisting>
perl -p -i -e 'print "\ty2tool y2automake\n" if /aclocal/' Makefile.cvs
</programlisting>

The new <literal remap="tt">Makefile.cvs</literal> should look like this:

<programlisting>
all:
        y2tool y2automake
        autoreconf --force --install
</programlisting>

</para>
</listitem>
<listitem>

<para>
Double-check what you just did and check it into the CVS when everything looks OK.

"<literal remap="tt">cvs up</literal>" should print something like this:


<programlisting>
M .cvsignore
R COPYING
R COPYRIGHT.english
R COPYRIGHT.french
R COPYRIGHT.german
R Makefile.am
M Makefile.cvs
A SUBDIRS
M myproject.spec.in
</programlisting>



"<literal remap="tt">cvs diff</literal>"should print something like this:


<programlisting>
Index: .cvsignore
...
 config.log
 aclocal.m4
+Makefile.am
...
cvs server: Makefile.am was removed, no comparison available
...
Index: Makefile.cvs
...
 all:
+       y2tool y2automake
	autoreconf --force --install
...
cvs server: SUBDIRS is a new entry, no comparison available
...
Index: myproject.spec.in
...
-# neededforbuild autoconf automake ...
+# neededforbuild yast2-devtools autoconf automake ...
...
</programlisting>


Important: <emphasis remap="bf">Don't build yet</emphasis>, otherwise <filename>Makefile.am</filename> will be
regenerated and "cvs ci" will complain when trying to check all this in.

</para>
</listitem>
<listitem>

<para>
Check your changes in:
<programlisting>
cvs ci
</programlisting>
</para>
</listitem>
<listitem>

<para>
Test-build your package locally:

<programlisting>
make -f Makefile.cvs &#38;&#38; make &#38;&#38; sudo make install
</programlisting>
You should now have a new <filename>Makefile.am</filename>.
</para>
</listitem>

</itemizedlist>


</section>

<section id="devtools_po-modules">
<title>Translation (<literal remap="tt">po</literal>) Modules)</title>

<para>
For YaST2 translation modules (<literal remap="tt">yast2-trans-...</literal>), the <filename>Makefile.am</filename>
in the <literal remap="tt">po</literal> subdirectory is automatically generated as well. The strategy
for that is slightly different, though: The resulting <filename>Makefile.am</filename> is
combined from <literal remap="tt">Makefile.am.top</literal>, <literal remap="tt">Makefile.am.center</literal>, and
<literal remap="tt">Makefile.am.bottom</literal>. The top and bottom files are used from the current
project, if there is such a file; otherwise, all files are taken from
<literal remap="tt">/usr/share/YaST2/data/devtools/admin/po</literal>. The center part is <emphasis remap="bf">always</emphasis>
taken from there.
</para>

<para>
Add custom <literal remap="tt">make</literal> targets or variable definitions to the top or bottom part
as required. This may only be necessary for the <literal remap="tt">yast2-trans-...</literal> data
modules (e.g., keyboard, mouse, printers).
</para>

<para>
The migration script takes care of that: It migrates the <literal remap="tt">po/</literal>
subdirectory, too, if there is one - and if there is a <literal remap="tt">Y2TEXTDOMAIN</literal>
file in the the project toplevel directory. For data modules, the migration
script backs up the existing <filename>Makefile.am</filename> to <literal remap="tt">Makefile.am.bottom</literal> (or to
<literal remap="tt">Makefile.am.old</literal>, if there already is a file named
<literal remap="tt">Makefile.am.bottom</literal>). <emphasis remap="bf">Make sure to edit this file</emphasis> and get rid of
duplicate parts before checking in.
</para>

</section>

<section>
<title>create-spec: Automatic creation of the <literal remap="tt">.spec</literal> file</title>
    <para>
        <command>make package-local</command> handles the file
        *.spec.in. The file <filename>package/*.spec</filename> created in the time of "make -f Makefile.cvs"
is overwitten in the time of "make package(-local)" with the
package/*.spec created by <command>y2tool create-spec</command>. But it should have the
same content.
</para>
<para>
    With <command>create-spec</command> you can use more 'macros' 
in the *.spec.in:
</para>
<variablelist>
    <varlistentry>
        <term>@HEADER-COMMENT@</term>
        <listitem>
            <para>writes the SuSE .spec comment</para>
        </listitem>
    </varlistentry>
    <varlistentry>
        <term>@HEADER@</term>
        <listitem>
            <para>writes the usual header except BuildArch:,
Requires:, Summary:</para>
        </listitem>
    </varlistentry>
    <varlistentry>
        <term>
            @PREP@
        </term>
        <listitem>
            <para>
            writes %prep with %setup
            </para>
        </listitem>
    </varlistentry>
    <varlistentry>
        <term>
            @BUILD-YCP@
        </term>
        <listitem>
            <para>
                writes %build with usual make
            </para>
        </listitem>
    </varlistentry>
    <varlistentry>
        <term>
  @INSTALL-YCP@    

        </term>
        <listitem>
            <para>
                writes %install with usual YCP make install
            </para>
        </listitem>
    </varlistentry>
    <varlistentry>
        <term>
@CLEAN@
        </term>
        <listitem>
            <para>
                writes %clean with removing RPM_BUILD_ROOT
            </para>
        </listitem>
    </varlistentry>
</variablelist>
<para>
So the new *.spec.in could look like:

<programlisting>
@HEADER-COMMENT@
# neededforbuild  autoconf automake ycpdoc yast2-testsuite ...

@HEADER@
Requires:       yast2 yast2-trans-XXpkgXX yast2-lib-wizard yast2-lib-sequencer
BuildArchitectures:     noarch

Summary:        Configuration of XXpkgXX

%description
This package is a part of YaST2. It contains the necessary scripts to
configure XXpkgXX.

@PREP@

@BUILD-YCP@

@INSTALL-YCP@

@CLEAN@

%files
%dir @yncludedir@/XXpkgXX
/...
</programlisting>
</para>

</section>

<section>
<title>Overview of Paths</title>

<para>
These paths are defined in your <literal remap="tt">configure.in</literal> generated by <literal remap="tt">y2autoconf</literal>
and substituted by <literal remap="tt">create-spec</literal>. That means they are accessible in all
your Makefiles and can be uses in <literal remap="tt">spec.in</literal> files.
</para>

<variablelist>
    <varlistentry>
        <term>

            yast2dir=${prefix}/share/YaST2
        </term>
        <listitem>
            <para>

                not for direct use
            </para>
        </listitem>
    </varlistentry>

    <varlistentry>
        <term>

            docdir=${prefix}/share/doc/packages/\$RPMNAME
        </term>
        <listitem>
            <para>

                for documentation
            </para>
        </listitem>
    </varlistentry>

    <varlistentry>
        <term>

            ybindir=${prefix}/lib/YaST2/bin
        </term>
        <listitem>
            <para>

                for all yast2 programs not be started by the user.
            </para>
        </listitem>
    </varlistentry>

    <varlistentry>
        <term>

            plugindir=${libdir}/YaST2/plugin
        </term>
        <listitem>
            <para>

                for loadable plugins
            </para>
        </listitem>
    </varlistentry>

    <varlistentry>
        <term>

            includedir=${prefix}/include/YaST2
        </term>
        <listitem>
            <para>

                for c header files
            </para>
        </listitem>
    </varlistentry>

    <varlistentry>
        <term>

            localedir=${yast2dir}/locale
        </term>
        <listitem>
            <para>

                for translations files
            </para>
        </listitem>
    </varlistentry>

    <varlistentry>
        <term>

            clientdir=${yast2dir}/clients
        </term>
        <listitem>
            <para>

                for ycp clients
            </para>
        </listitem>
    </varlistentry>

    <varlistentry>
        <term>

            moduledir=${yast2dir}/modules
        </term>
        <listitem>
            <para>

                for ycp modules
            </para>
        </listitem>
    </varlistentry>

    <varlistentry>
        <term>

            schemadir=${yast2dir}/schema
        </term>
        <listitem>
            <para>

                for schema files (autoyast, control file)
            </para>
        </listitem>
    </varlistentry>

    <varlistentry>
        <term>

            yncludedir=${yast2dir}/include
        </term>
        <listitem>
            <para>

                for ycp includes
            </para>
        </listitem>
    </varlistentry>

    <varlistentry>
        <term>

            scrconfdir=${yast2dir}/scrconf
        </term>
        <listitem>
            <para>

                for scr files
            </para>
        </listitem>
    </varlistentry>

    <varlistentry>
        <term>

            desktopdir=${prefix}/share/applications/YaST2/modules
        </term>
        <listitem>
            <para>

                for .desktop files (former *.y2cc)
            </para>
        </listitem>
    </varlistentry>

    <varlistentry>
        <term>

            execcompdir=${prefix}/lib/YaST2
        </term>
        <listitem>
            <para>

                for external programs that are yast2 components. here you
                have to append servers, servers_non_y2, clients or
                clients_non_y2.
            </para>
        </listitem>
    </varlistentry>

    <varlistentry>
        <term>

            ydatadir=${yast2dir}/data
        </term>
        <listitem>
            <para>

                for general data
            </para>
        </listitem>
    </varlistentry>

    <varlistentry>
        <term>

            imagedir=${yast2dir}/images
        </term>
        <listitem>
            <para>

                for non theme-able images
            </para>
        </listitem>
    </varlistentry>

    <varlistentry>
        <term>

            themedir=${yast2dir}/theme
        </term>
        <listitem>
            <para>

                for theme-able images (every theme must provide the same list of images)
            </para>
        </listitem>
    </varlistentry>
</variablelist>


<informalexample>
<para>In Makefile.am you can simply say</para>

<programlisting>
    ybin_PROGRAMS = y2base
</programlisting>

<para>
  when you what the program y2base to be installed in ybindir. No
  need to change bindir or even prefix.
</para>
<para>
In the files section of your spec.in file use something like this:

<programlisting>
    @scrconfdir@/*.scr
</programlisting>

  Remember that the asterisk is only save when using a BuildRoot (and
  please use a BuildRoot).
</para>

<para>
If you need a define in a C++ file you have to pass it to the compiler.
  Simply use

<programlisting>
    AM_CXXFLAGS = -DPLUGINDIR=\"${plugindir}\"
</programlisting>

  in your Makefile.am.
</para>
</informalexample>


</section>

<section>
<title>Toplevel <literal remap="tt">make</literal> Targets in Detail</title>

<section id="make_package-local">
<title id="make_package-local.title" ><literal remap="tt">make package-local</literal></title>
<para>
Create a tarball from your module
and put it into the <literal remap="tt">package/</literal> directory. This also creates a spec file
from the .spec.in file.
</para>

</section>

<section>
<title><literal remap="tt">make package</literal></title>

<para>
This checks for cvs consistency (see <link linkend="make_check-tagversion" endterm="make_check-tagversion.title"/>) and whether or not you correctly
tagged that version (don't forget to increase the version number in
<literal remap="tt">VERSION</literal>!), then does everything <link linkend="make_package-local" endterm="make_package-local.title"/> did.
</para>

</section>

<section id="make_check-tagversion">
    <title id="make_check-tagversion.title"><literal>make check-tagversion</literal></title>

<para>
This is performed by <literal remap="tt">make package</literal> prior to actually creating a tarball:
It checks whether or not you correctly tagged the current version. Use
"<literal remap="tt">y2tool tagversion</literal>" to do that once you increased the version number in
<literal remap="tt">VERSION</literal>.
</para>

<note>
<para>
You will very likely never call this manually.
</para>
</note>

</section>

<section>
<title><literal>make check-up-to-date</literal></title>
<para>
This is performed by <literal remap="tt">make package</literal> prior to actually creating a tarball:
It checks whether or not everyting in this directory tree is checked into
CVS or Subversion. Any modified, added or removed files make this check fail.
</para>

<note>
<para>
You will very likely never call this manually.
</para>
</note>

</section>

<section userlevel="suse">
<title><literal remap="tt">make checkin-stable</literal></title>

<para>
This makes a package (i.e. it does everything "<literal remap="tt">make package</literal>" does and
checks it into the correct SuSE Linux distribution.
</para>
<note>
<para>
This requires <literal remap="tt">/work/src/done</literal> to be mounted via NFS.
</para>
</note>

</section>

<section userlevel="suse">
<title>
<literal remap="tt">make stable</literal></title>

<para>
Just an alias for "<literal remap="tt">make checkin-stable</literal>".
</para>

</section>
</section>


<!--
<section>
    <title>FAQ</title>
    <qandaset defaultlabel='number'>
<qandaentry id="devtools_qa_5">
    <question id="devtools_qa_5_q">
<para>Why not use a straightforward <filename>Makefile.am</filename> any more?</para>
</question>
<answer>
<para>
At the time of this writing, we already have 86 YaST2 C++ and YCP modules, and
the number keeps increasing. Each of those modules contains a <filename>Makefile.am</filename>
that is more or less the same - depending on when that module was created, how
active the maintainer is etc. - all that meaning many of those files may be
outdated or inconsistent with the rest of YaST2.
</para>
<para>
Many <literal remap="tt">make</literal> targets in <filename>Makefile.am</filename> are pure formalisms - introduced to
enable easy and consistent package creation etc. - those targets should be the
same for each module. This can only made sure by generating them.
</para>
</answer>
</qandaentry>


<qandaentry id="devtools_qa_6">
    <question id="devtools_qa_6_q">
<para>Why so much fuss about <literal remap="tt">make package</literal>?</para>
</question>

<answer>
<para>
The primary purpose of "<literal remap="tt">make package</literal>" is to create a tarball that is
checked into a SuSE Linux distribution - i.e. into a real product where
consistency, reliablility and thus quality matters. We want to make sure we can
reliably track the differences between each version that is checked in - thus
the checks for consistency with the CVS repository and the check for tags.
</para>
</answer>
</qandaentry>

<qandaentry id="devtools_qa_7">
    <question id="devtools_qa_7_q">
<para>How do I test-build my package now prior to <literal remap="tt">CVS checkin</literal>?</para>
</question>

<answer>
<para>
Use "<literal remap="tt">make package-local</literal>", then build. If everything works out allright,
check in your changes into CVS, tag your version ("<literal remap="tt">y2tool tagversion</literal>") and
then use "<literal remap="tt">make package</literal>".
</para>
</answer>
</qandaentry>

<qandaentry id="devtools_qa_8">
    <question id="devtools_qa_8_q">
<para>Do I really need a <literal remap="tt">SUBDIRS</literal> file?</para>
</question>

<answer>
<para>
No - you can do without this file. In this case, all direct subdiretories of
your toplevel directory are scanned for a <filename>Makefile.am</filename>, and if such a file
is found, the respective directory is added to <literal remap="tt">SUBDIRS</literal> in the toplevel
<filename>Makefile.am</filename>. The directories are sorted alphabetically.
</para>

<para>
If there is a <literal remap="tt">SUBDIRS</literal> file, however, this has higher priority. You might
want to use this if you want to temporarily disable a subdirectory or if you
want to change the execution order.
</para>

</answer>
</qandaentry>


<qandaentry id="devtools_qa_9">
<question id="devtools_qa_9_q">
<para>Why use <literal remap="tt">y2tool</literal> to call simple tools?</para>
</question>

<answer>
<para>
This is just a workaround to avoid cluttering the system namespace. This
<literal remap="tt">y2tool</literal> script is a simple wrapper that calls a script or program from
<literal remap="tt">/usr/share/YaST2/data/devtools/bin</literal> - you might as well extend your
<literal remap="tt">$PATH</literal> environment variable to include that path.
</para>
</answer>
</qandaentry>
</qandaset>
</section>


<section>
<title>Troubleshooting</title>

<qandaset defaultlabel='number'>
    <qandaentry id="devtools_qa_1">
    <question id="devtools_qa_1_q">
<para>Can't find <literal remap="tt">y2tool</literal> or <literal remap="tt">y2automake</literal></para>
</question>

<answer>
<para>
Did you install the devtools?
</para>

<para>
    See the <link linkend="devtools_quick-start" endterm="devtools_quick-start.title"/> section for details.
</para>
</answer>
</qandaentry>

<qandaentry id="devtools_qa_2">
    <question id="devtools_qa_2_q">
<para>
<literal remap="tt">cvs up</literal> reports changes in the toplevel <filename>Makefile.am</filename>
</para>
</question>

<answer>
<para>
The toplevel <filename>Makefile.am</filename> should no longer be in the CVS repository. Remove
it from there - it is automatically generated now.
</para>

<para>
    See the <link linkend="devtools_migration" endterm="devtools_migration.title"/> section for details.
</para>

</answer>

</qandaentry>
<qandaentry id="devtools_qa_3">
    <question id="devtools_qa_3_q">
<para>
<literal remap="tt">make package</literal> fails
</para>
</question>
<answer>
<para>
"<literal remap="tt">make package</literal>" is very picky: It checks whether your working
directory is up-to-date, everything is checked in and whether or not you
correctly tagged the package you wish to create. If any of those steps fails,
"<literal remap="tt">make package</literal>" fails. This is to make sure only consistent packages are
checked into the SuSE distributions.
</para>

<para>
You can work around this by using "<literal remap="tt">make package-local</literal>" instead.
But <emphasis remap="bf">never check in a package to <literal remap="tt">/work/src/done</literal>
that you created this way!</emphasis>
</para>
</answer>
</qandaentry>

<qandaentry id="devtools_qa_4">
    <question id="devtools_qa_4_q">
<para>
<emphasis>Autobuild</emphasis> fails after migrating to <emphasis>devtools</emphasis>
</para>
</question>
<answer>
<para>
Did you add "<literal remap="tt">yast2-devtools</literal>" to the "<literal remap="tt">neededforbuild</literal>" section in the
spec file (or .spec.in)?
</para>
</answer>
</qandaentry>
</qandaset>

</section>
-->
</section>
