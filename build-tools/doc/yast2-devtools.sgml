<!doctype linuxdoc system>
<article>
<title>YaST2 Development Tools
<author>Stefan Hundhammer &lt;sh@suse.de&gt;
<date>$Id$

<abstract>
This document is a user's guide to the YaST2 <em>devtools</em> (short for
"development tools"), a utility collection to make developing YaST2 code easier
- C++ as well as YCP.
</abstract>

<toc>


<sect>Quick Start<label id="quick start">

<p>
<itemize>

<item>
Install the <tt/yast2-devtools/ RPM or check out the <tt/devtools/ module from
the YaST2 CVS and build and install it:

<code>
cd yast2                  # your YaST2 CVS working directory
cvs co devtools
cd devtools
make -f Makefile.cvs
make
sudo make install
</code>


<item>
See the <ref id="migration" name="migration guide"> how to change your C++ or
YCP module.


<item>
Build and use your package as before.


<item>
If <tt/make package/ complains, fix the complaints. For a tempoarary package to
check whether or not <tt/build/ works with your changes, use "<tt/make
package-local/" - but <bf>never check in a package to <tt>/work/src/done</tt>
that you created this way!</bf>


</itemize>
</p>


<sect>What is it?

<p>
The YaST2 devtools are an add-on to the classic automake / autoconf environment
YaST2 used to use.
</p>

<p>
Since the toplevel <tt/Makefile.am/ is pretty much the same throughout all
YaST2 C++ or YCP modules yet contains more and more specialized <tt/make/
targets, this toplevel <tt/Makefile.am/ is now automatically generated.
</p>

<p>
The only thing that is (or, rather, "should be") different in all those
toplevel <tt/Makefile.am/ files is the "<tt/SUBDIRS =/" line. This line is
moved to a <ref id="subdirs" name="separate file SUBDIRS"> in the
package's toplevel directory, much like <tt/RPMNAME/, <tt/VERSION/,
<tt/MAINTAINER/ etc. - the rest of <tt/Makefile.am/ is copied from a common
path <tt>/usr/share/YaST2/data/devtools/admin</tt>. Thus, changes that should affect
all of YaST2's toplevel <tt/Makefile.am/ files are much easier to do and all
YaST2 modules can benefit from them without the need to change (i.e. <tt/cvs
up/, edit, <tt/cvs ci/) all of over 85 individual files.
</p>

<p>
This implies, of course, that the toplevel <tt/Makefile.am/ is no longer stored
in the CVS repository since it is now automatically generated.
</p>

<p>
On the downside, this of course implies that the files and scripts required for
this new automagic are available at build time - i.e. on each YaST2 developer's
development machine as well as in the <em/Autobuild/ environment. Thus, you
will need to either install the appropriate RPM or build the devtools manually
- see the <ref id="quick start" name="quick start"> section for details.
</p>



<sect>Migration<label id="migration">

<p>
If you haven't done that yet, install the devtools - see the
<ref id="quick start" name="quick start"> section for details.
</p>

<p>
If you are not sure, check <tt>/usr/share/YaST2/data/devtools</tt> - if you don't
have that directory, the devtools are not installed.
</p>

<p>
You can simply use the <tt/devtools-migration/ script that comes with the
devtools package:

<code>
cd yast2/modules/mypackage
y2tool devtools-migration
cvs ci
</code>

</p>

<p>
This script performs the following steps:
</p>


<p>
<itemize>

<item>
Go to your package's toplevel directory:

<code>
cd yast2/modules/mypackage
</code>


<item>
<ref id="subdirs" name="Create a SUBDIRS"> file from your existing
<tt/Makefile.am/ (Note: you can do without that <tt/SUBDIRS/ file if you want
to include all subdirectories that have a <tt/Makefile.am/ in alphabetical
order anyway):
<code>
grep 'SUBDIRS' Makefile.am | sed -e 's/SUBDIRS *= *//' >SUBDIRS
</code>

Getting rid of the "<tt>SUBDIRS = </tt>" prefix is not exactly mandatory (the
devtools are forgiving enough to handle that), but recommended.


<item>
Add that new <tt/SUBDIRS/ file to the CVS repository:
<code>
cvs add SUBDIRS
</code>



<item>
Get rid of the old <tt/Makefile.am/ both locally and in the CVS repository -
this file will be automatically generated from now on:

<code>
cvs rm -f Makefile.am
</code>


<item>
Get rid of the old copyright notices (<tt/COPYING/,
<<tt>COPYRIGHT.{english,german,french}</tt>)  both locally and in the CVS repository:
<code>
cvs rm -f COPYING COPYRIGHT.{english,french,german}
</code>

<p>
Those files will automatically be added to the tarball upon <tt/make package/,
<tt/make dist/ and related commands.


<item>
Add <tt/Makefile.am/ to the <tt/.cvsignore/ file since it will be automatically
generated from now on (otherwise "cvs up" will keep complaining about it):

<code>
echo "Makefile.am" >>.cvsignore
</code>


<item>
Edit your <tt/.spec.in/ file. Locate the <tt/neededforbuild/ line and add
<tt/yast2-devtools/ to it:

<code>
vi *.spec.in
...
(locate "neededforbuild")
(add "yast2-devtools")
(save + quit)
</code>

OK, that was the wimp version. Here is the freak version:
<code>
perl -p -i -e 's/neededforbuild/neededforbuild yast2-devtools/' *.spec.in
</code>



<item>
Add the line that creates the toplevel <tt/Makefile.am/ to your <tt/Makefile.cvs/:

<code>
vi Makefile.cvs
(locate "aclocal")
(add a new line above this:)
[tab]	y2tool y2automake
(save + quit)
</code>

Again, a freak version for this:

<code>
perl -p -i -e 'print "\ty2tool y2automake\n" if /aclocal/' Makefile.cvs
</code>

The new <tt/Makefile.cvs/ should look like this:

<code>
all:
        y2tool y2automake
        autoreconf --force --install
</code>



<item>
Double-check what you just did and check it into the CVS when everything looks OK.

"<tt>cvs up</tt>" should print something like this:

<code>
M .cvsignore
R COPYING
R COPYRIGHT.english
R COPYRIGHT.french
R COPYRIGHT.german
R Makefile.am
M Makefile.cvs
A SUBDIRS
M myproject.spec.in
</code>


"<tt>cvs diff</tt>"should print something like this:

<code>
Index: .cvsignore
...
 config.log
 aclocal.m4
+Makefile.am
...
cvs server: Makefile.am was removed, no comparison available
...
Index: Makefile.cvs
...
 all:
+       y2tool y2automake
	autoreconf --force --install
...
cvs server: SUBDIRS is a new entry, no comparison available
...
Index: myproject.spec.in
...
-# neededforbuild autoconf automake ...
+# neededforbuild yast2-devtools autoconf automake ...
...
</code>

Important: <bf>Don't build yet</bf>, otherwise <tt/Makefile.am/ will be
regenerated and "cvs ci" will complain when trying to check all this in.

<item>Check your changes in:

<code>
cvs ci
</code>


<item>
Test-build your package locally:

<code>
make -f Makefile.cvs && make && sudo make install
</code>

You should now have a new <tt/Makefile.am/.


</itemize>
</p>


<sect>Translation (<tt>po</tt>) Modules<label id="po-modules">

<p>
For YaST2 translation modules (<tt>yast2-trans-...</tt>), the <tt/Makefile.am/
in the <tt/po/ subdirectory is automatically generated as well. The strategy
for that is slightly different, though: The resulting <tt/Makefile.am/ is
combined from <tt/Makefile.am.top/, <tt/Makefile.am.center/, and
<tt/Makefile.am.bottom/. The top and bottom files are used from the current
project, if there is such a file; otherwise, all files are taken from
<tt>/usr/share/YaST2/data/devtools/admin/po</tt>. The center part is <bf>always</bf>
taken from there.
</p>

<p>
Add custom <tt/make/ targets or variable definitions to the top or bottom part
as required. This may only be necessary for the <tt>yast2-trans-...</tt> data
modules (e.g., keyboard, mouse, printers).
</p>

<p>
The migration script takes care of that: It migrates the <tt>po/</tt>
subdirectory, too, if there is one - and if there is a <tt>Y2TEXTDOMAIN</tt>
file in the the project toplevel directory. For data modules, the migration
script backs up the existing <tt/Makefile.am/ to <tt/Makefile.am.bottom/ (or to
<tt/Makefile.am.old/, if there already is a file named
<tt/Makefile.am.bottom/). <bf>Make sure to edit this file</bf> and get rid of
duplicate parts before checking in.
</p>

<sect>y2autoconf: Automatic creation of <tt/configure.in/

<p>
Sorry, for now it is just a hardcopy of a mail to yast2-hacker:

<code>
Q: Why?
A: It has a similar reason as the creation of y2automake. The configure.in's
   are usually similar (or same) for a group of packages, so let's care just
   about the different parts. Let's generate the rest.
   Additionally it is much simplier to maintain the common parts. Do we
   need  to switch to use BuildRoot? If we edit each of the .spec.in, it
   will need a lot of effort. If we do it on one place, we do it once and
   then just test it for each package (the usage of BuildRoot already is
   in the create-spec, BTW).

Q: How to migrate to y2autoconf?
A: - checkout the newest devtools and install them
   - save your configure.in to configure.in.bak
   - edit your Makefile.cvs:
	|        ./configure
 	|
	|all:
	|+       y2tool y2autoconf
	|        y2tool y2automake
	|        aclocal
	|        autoconf
   - create configure.in.in with a content you need. Example for a package
     containing YCP:
	|## configure.in.in for XXpkgXX
	|
	|## Initialize
	|@YAST2-INIT-COMMON@
	|@YAST2-INIT-YCP@
	|
	|## some common checks
	|@YAST2-CHECKS-COMMON@
	|@YAST2-CHECKS-YCP@
	|
	|## and generate the output...
	|@YAST2-OUTPUT@
     Instead of @YAST2-INIT-YCP@ and @YAST2-CHECKS-YCP@ you may want to use
     the similar @YAST2-*-PROGRAM@, or @YAST2-*-PO@.
   - if you need some additional checks, add them after @YAST2-CHECKS-*@:
	|@YAST2-CHECKS-YCP@
	|AC_PATH_PROG(SGML2HTML, sgml2html, false)
	|if test "$SGML2HTML" ...etc.
	|...etc...
	|
	|## and generate the output...
	|@YAST2-OUTPUT@
   - do "make -f Makefile.cvs", it will hopefully create a new "configure"
   - compare the new configure.in and your saved configure.in.bak
     if it fulfils your needs.
   - if no (because of bug, typo or something), write me a mail
   - if yes:
	|rm configure.in
	|cvs remove configure.in
	|cvs add configure.in.in
	|cvs commit

Even though I tried to do my best to avoid bugs and mistakes, I am sure
that there will be some... Please, report them to me (kendy@suse.cz),
I'll try to fix them ASAP.
</code>

</p>

<sect>create-spec: Automatic creation of the <tt/.spec/ file

<p>
Sorry, for now it is just a hardcopy of two mails to yast2-hacker:

<code>
When I was adding support for BuildRoot in .spec to the config skeleton, I
noticed, that everyone, who wants to use it in his package must edit his
*.spec.in similar way, he had to do it for Makefile.am. So I decided to do
one more y2tool: create-spec.

It is called in "make package-local" and it can handle the current
*.spec.in, so you should not notice any difference. Of course, there is
one: the file package/*.spec created in the time of "make -f Makefile.cvs"
is overwitten in the time of "make package(-local)" with the
package/*.spec created by "y2tool create-spec". But it should have the
same content.

But it is not all, of course :-)

The new feature is, that you can use more 'macros' (than just @RPMNAME@,
@VERSION@, @MAINTAINER@) in the *.spec.in:

  @HEADER-COMMENT@ - writes the SuSE .spec comment
  @HEADER@         - writes the usual header except BuildArch:,
                     Requires:, Summary:
  @PREP@           - writes %prep with %setup
  @BUILD-YCP@      - writes %build with usual make
  @INSTALL-YCP@    - writes %install with usual YCP make install
  @CLEAN@          - writes %clean with removing RPM_BUILD_ROOT

So the new *.spec.in could look like:

---------------------------------------------------
@HEADER-COMMENT@
# neededforbuild  autoconf automake ycpdoc yast2-testsuite ...

@HEADER@
Requires:       yast2 yast2-trans-XXpkgXX yast2-lib-wizard yast2-lib-sequencer
BuildArchitectures:     noarch

Summary:        Configuration of XXpkgXX

%description
This package is a part of YaST2. It contains the necessary scripts to
configure XXpkgXX.

@PREP@

@BUILD-YCP@

@INSTALL-YCP@

@CLEAN@

%files
%dir @yncludedir@/XXpkgXX
/...
------------------------------------------------------------------

Please try the skeleton if you want to see the new features in action :-)

&lt;IMPORTANT&gt;
Please, if you use yast2-devtools and you tested that your package works
with create-spec, remove the line

	package/yast2-*.spec:yast2-*.spec.in

from its configure.in!
&lt;/IMPORTANT&gt;

@BUILD-CPP@, @INSTALL-CPP@, @BUILD-PO@ and @INSTALL-PO@ are coming soon...

BTW:
- the line "package/*.spec:*.spec.in" in yast2-devtools configure.in has
  to stay there (at least for now) for the case "make package" in devtools
  without devtoools previously installed
</code>

<code>
Q: How to migrate to create-spec?
A: - checkout the newest devtools and install them
   - save your package.spec.in to package.spec.in.bak and package/package.spec
     to package/package.spec.bak
   - edit package.spec.in to be similar to:
	|@HEADER-COMMENT@
	|
	|# neededforbuild  yast2-devtools autoconf automake gpp libgpp ydoc libycp libycp-devel liby2 liby2-devel libscr libscr-devel tcl dejagnu expect
	|
	|@HEADER@
	|Summary:	YaST2 SCR agent for rc.config-style files
	|
	|%description
	|-
	|
	|%package devel
	|Version:	@VERSION@
	|Summary:	YaST2 SCR agent for rc.config-style files for developers
	|Group:		Development/Libraries
	|Provides:	y2a_rcnf
	|Obsoletes:	y2a_rcnf
	|
	|%description devel
	|-
	|
	|@PREP@
	|
	|@BUILD-PROGRAM@
	|
	|@INSTALL-PROGRAM@
	|
	|@CLEAN@
	|
	|%files
	|%defattr(-,root,root)
	|@plugindir@/libpy2ag_rcconfig.so.*
	|@scrconfdir@/*.scr
	|
	|%files devel
	|%defattr(-,root,root)
	|@plugindir@/libpy2ag_rcconfig.so
	|@plugindir@/libpy2ag_rcconfig.la
	|%doc @docdir@
     Instead of @BUILD-PROGRAM@ and @INSTALL-PROGRAM@ you may want to use
     the similar @*-YCP@, or @*-PO@.
   - Some packages most probably  do not have a "-devel" package, so you
     do not need to specify that part
   - do "make -f Makefile.cvs" followed by "make package-local" (now the
     package/package.spec is generated during it, not during configure)
   - compare the new package/package.spec and your saved
     package/package.spec.bak if it fulfils your needs.
   - if no (because of bug, typo or something), write me a mail
   - if yes:
	|cvs commit
</code>
</p>


<sect>Overview of paths

<p>
These paths are defined in your <tt/configure.in/ generated by <tt/y2autoconf/
and substituted by <tt/create-spec/. That means they are accessible in all
your Makefiles and can be uses in <tt/spec.in/ files.

<code>

yast2dir=${prefix}/share/YaST2
  not for direct use

docdir=${prefix}/share/doc/packages/\$RPMNAME
  for documentation

ybindir=${prefix}/lib/YaST2/bin
  for all yast2 programs not be started by the user.

plugindir=${libdir}/YaST2/plugin
  for loadable plugins

includedir=${prefix}/include/YaST2
  for c header files

localedir=${yast2dir}/locale
  for translations files

clientdir=${yast2dir}/clients
  for ycp clients

moduledir=${yast2dir}/modules
  for ycp modules

schemadir=${yast2dir}/schema
  for schema files (autoyast, control file)

yncludedir=${yast2dir}/include
  for ycp includes

scrconfdir=${yast2dir}/scrconf
  for scr files

desktopdir=${prefix}/share/applications/YaST2/modules
  for .desktop files (former *.y2cc)

execcompdir=${prefix}/lib/YaST2
  for external programs that are yast2 components. here you
  have to append servers, servers_non_y2, clients or
  clients_non_y2.

ydatadir=${yast2dir}/data
  for general data

imagedir=${yast2dir}/images
  for non theme-able images

themedir=${yast2dir}/theme
  for theme-able images (every theme must provide the same list of images)

</code>
</p>

<p>
Some examples:

<code>

- In Makefile.am you can simply say

    ybin_PROGRAMS = y2base

  when you what the program y2base to be installed in ybindir. No
  need to change bindir or even prefix.

- In the files section of your spec.in file use something like this:

    @scrconfdir@/*.scr

  Remember that the asterisk is only save when using a BuildRoot (and
  please use a BuildRoot).

- If you need a define in a C++ file you have to pass it to the compiler.
  Simply use

    AM_CXXFLAGS = -DPLUGINDIR=\"${plugindir}\"

  in your Makefile.am.

</code>
</p>


<sect>Toplevel <tt/make/ Targets in Detail

<sect1><tt/make package-local/

<p>
This is what the old "<tt/make package/" did: Create a tarball from your module
and put it into the <tt>package/</tt> directory. This also creates a spec file
from the .spec.in file.
</p>


<sect1><tt/make package/

<p>
This checks for cvs consistency (see below) and whether or not you correctly
tagged that version (don't forget to increase the version number in
<tt/VERSION/!), then does everything "<tt/make package-local/" did.
</p>


<sect1><tt/make check-tagversion/

<p>
This is performed by <tt/make package/ prior to actually creating a tarball:
It checks whether or not you correctly tagged the current version. Use
"<tt/y2tool tagversion/" to do that once you increased the version number in
<tt/VERSION/.
</p>

<p>
You will very likely never call this manually.
</p>


<sect1><tt/make check-up-to-date/

<p>
This is performed by <tt/make package/ prior to actually creating a tarball:
It checks whether or not everyting in this directory tree is checked into
CVS. Any modified, added or removed files make this check fail.
</p>

<p>
You will very likely never call this manually.
</p>


<sect1><tt/make checkin-stable/

<p>
This makes a package (i.e. it does everything "<tt/make package/" does and
checks it into the correct SuSE Linux distribution.
</p>

<p>
This requires <tt>/work/src/done</tt> to be mounted via NFS.
</p>

<sect1><tt/make stable/

<p>
Just an alias for "<tt/make checkin-stable/".
</p>



<sect>Troubleshooting

<sect1>Can't find <tt/y2tool/ or <tt/y2automake/

<p>
Did you install the devtools?
</p>

<p>
See the <ref id="quick start" name="quick start"> section for details.
</p>


<sect1>"<tt/cvs up/" reports changes in the toplevel <tt/Makefile.am/

<p>
The toplevel <tt/Makefile.am/ should no longer be in the CVS repository. Remove
it from there - it is automatically generated now.
</p>

<p>
See the <ref id="migration" name="migration"> section for details.
</p>


<sect1>"<tt/make package/" fails

<p>
"<tt/make package/" is much more picky now: It checks whether your working
directory is up-to-date, everything is checked in and whether or not you
correctly tagged the package you wish to create. If any of those steps fails,
"<tt/make package/" fails. This is to make sure only consistent packages are
checked into the SuSE distributions.
</p>

<p>
You can work around this by using "<tt/make package-local/" instead.
But <bf>never check in a package to <tt>/work/src/done</tt>
that you created this way!</bf>
</p>


<sect1><em/Autobuild/ fails after migrating to <em/devtools/

<p>
Did you add "<tt/yast2-devtools/" to the "<tt/neededforbuild/" section in the
spec file (or .spec.in)?
</p>


<sect>Questions and Answers

<sect1>Why not use a straightforward <tt/Makefile.am/ any more?

<p>
At the time of this writing, we already have 86 YaST2 C++ and YCP modules, and
the number keeps increasing. Each of those modules contains a <tt/Makefile.am/
that is more or less the same - depending on when that module was created, how
active the maintainer is etc. - all that meaning many of those files may be
outdated or inconsistent with the rest of YaST2.
</p>

<p>
Many <tt/make/ targets in <tt/Makefile.am/ are pure formalisms - introduced to
enable easy and consistent package creation etc. - those targets should be the
same for each module. This can only made sure by generating them.
</p>


<sect1>Why so much fuss about "<tt/make package/"?

<p>
The primary purpose of "<tt/make package/" is to create a tarball that is
checked into a SuSE Linux distribution - i.e. into a real product where
consistency, reliablility and thus quality matters. We want to make sure we can
reliably track the differences between each version that is checked in - thus
the checks for consistency with the CVS repository and the check for tags.
</p>


<sect1>How do I test-build my package now prior to <tt/CVS checkin/?

<p>
Use "<tt/make package-local/", then build. If everything works out allright,
check in your changes into CVS, tag your version ("<tt/y2tool tagversion/") and
then use "<tt/make package/".
</p>


<sect1>Do I really need a <tt/SUBDIRS/ file?<label id="subdirs">

<p>
No - you can do without this file. In this case, all direct subdiretories of
your toplevel directory are scanned for a <tt/Makefile.am/, and if such a file
is found, the respective directory is added to <tt/SUBDIRS/ in the toplevel
<tt/Makefile.am/. The directories are sorted alphabetically.
</p>

<p>
If there is a <tt/SUBDIRS/ file, however, this has higher priority. You might
want to use this if you want to temporarily disable a subdirectory or if you
want to change the execution order.
</p>

<sect1>Why use <tt/y2tool/ to call simple tools?

<p>
This is just a workaround to avoid cluttering the system namespace. This
<tt/y2tool/ script is a simple wrapper that calls a script or program from
<tt>/usr/share/YaST2/data/devtools/bin</tt> - you might as well extend your
<tt/$PATH/ environment variable to include that path.
</p>


</article>
